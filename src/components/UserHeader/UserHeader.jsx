import React, { useRef, useState } from 'react'
import styled from 'styled-components'
import ButtonComponent from '../ButtonComponent/ButtonComponent'
import {withRouter} from 'react-router'
import { useSnackbar } from 'notistack'
import { getAuth, signInWithEmailAndPassword } from 'firebase/auth'
import LoginForm from './LoginForm'

const UserHeader = ({displayUsername, signedIn, history, username}) => {

    const UserHeaderStyles = styled.header`
        
        display: flex;
        justify-content: space-between;
        align-items: center;

        padding: 2vh 0px;

        --animate-duration: 0.2s;

        button {
            height: 50px;
        }

        .form-container {

            width: 100%;
            height: 90vh;

            display: flex;
            justify-content: center;

            position: absolute;

            left: 0;
            top: 10vh;

            z-index: 9000;

            &.hidden {
                z-index: -9001;
            }

            background: radial-gradient( circle farthest-corner at 10% 20%,  rgba(90,92,106,0.3) 0%, rgba(32,45,58,0.3) 81.3% ); //https://cssgradient.io/gradient-backgrounds/

            .login-form {

                width: 40vw;
                height: fit-content;
                
                background: radial-gradient( circle farthest-corner at 10% 20%,  rgba(90,92,106,0.9) 0%, rgba(32,45,58,0.9) 81.3% ); //https://cssgradient.io/gradient-backgrounds/

                margin-top: 8vh;
                padding: 2vh 2vw;
                border-radius: 3px;

                &.hidden {
                    z-index: -9000;
                }

                input {
                    height: 5vh;
                    width: 100%;
                    margin-bottom: 1vh;
                    outline: none;
                    border: none;
                    border-bottom: 2px solid #a1a1a1;

                    color: #fff;
                    font-size: 2.3vh;

                    background: none;
                }

                input::placeholder {
                    color: #bbb;
                }
            }
        }

        @media (max-width: 640px) {
            height: 100%;

            flex-direction: column;
            /* justify-content: space-around; */

            h1 {
                word-break: break-all;
            }

            .header-button {
                margin-top: 1vh;
                width: 94vw !important;
                margin: 2.2vh 0vw;
            }

            .login-form {
                position: initial;
                width: 94vw;
                background: #5a5a5a; 
            }
        }

        .fade-out {
            -webkit-animation: fade-out 0.4s ease-out both;
                    animation: fade-out 0.4s ease-out both;
        }

        .fade-in {
            -webkit-animation: fade-in 0.4s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;
                    animation: fade-in 0.4s cubic-bezier(0.390, 0.575, 0.565, 1.000) both;
        }

        /* ----------------------------------------------
        * Generated by Animista on 2022-3-30 17:53:43
        * Licensed under FreeBSD License.
        * See http://animista.net/license for more info. 
        * w: http://animista.net, t: @cssanimista
        * ---------------------------------------------- */

        /**
         * ----------------------------------------
         * animation fade-out
         * ----------------------------------------
         */
        
            
        @keyframes fade-out {
            0% {
                opacity: 1;
            }
            100% {
                opacity: 0;
            }
        }

        @keyframes fade-in {
            0% {
                opacity: 0;
            }
            100% {
                opacity: 1;
            }
        }
    `

    const [loginFormHidden, setLoginFormHidden] = useState(true)

    const emailInput = useRef('')
    const passwordInput = useRef('')

    function redirectPage() {
        history.push(`/${username}/write`)
    }

    function alternateLoginForm() {
        setLoginFormHidden(!loginFormHidden)

        document.getElementById('root').style.overflowY = loginFormHidden ? "hidden" : "visible"
    }

    return (
        <UserHeaderStyles>
            <h1>
                {displayUsername}'s lasts posts
            </h1>
            <ButtonComponent
                color="#66A3FF"
                text={signedIn ? "Write One!" : "Log In"}
                width="20vw"
                onClickFunction={signedIn ? redirectPage : alternateLoginForm}
                className="header-button"
            />
            {
                !signedIn ?
                    <LoginForm loginFormHidden={loginFormHidden} emailInput={emailInput} passwordInput={passwordInput} alternateLoginForm={alternateLoginForm}/>
                : null
            }

        </UserHeaderStyles>
    )
}

export default withRouter(UserHeader)